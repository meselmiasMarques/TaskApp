@inherits LayoutComponentBase


<MudThemeProvider
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="_isDarkMode"
    Theme="Configuration.Theme"/>
<MudPopoverProvider/>
<MudSnackbarProvider/>
<MudDialogProvider/>
<MudLayout>
    <MudAppBar>
        <MudIconButton
            Icon="@Icons.Material.Filled.Menu"
            Color="Color.Inherit"
            Edge="Edge.Start"
            OnClick="ToggleDrawer"/>
        Tarefas 
        <MudSpacer/>
        <MudButton Href="/Tarefas/novo"
                   Variant="Variant.Text" StartIcon="@Icons.Material.TwoTone.Add">
            NOVA TAREFA
        </MudButton>
        <MudSpacer/>
      
        <MudSwitch
            Color="Color.Inherit"
            @bind-Value="@_isDarkMode"
            T="bool"
            Class="ma-4"
            ThumbIcon="@Icons.Material.TwoTone.Lightbulb"/>
    </MudAppBar>
    <MudDrawer @bind-Open="@_isDrawerOpened">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {

    private bool _isDrawerOpened = true;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDrawer()
        => _isDrawerOpened = !_isDrawerOpened;

}